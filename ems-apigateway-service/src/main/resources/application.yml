spring:
  profiles:
    active:
    - local
---
spring:
  config:
    activate:
      on-profile: local #이클립스 내에서 돌릴때.
      
  rabbitmq:
    host: 127.0.0.1
  cloud:
    gateway:
      globalcors: # 글로벌 CORS(Cross-Origin Resource Sharing) 설정
        cors-configurations: # CORS 구성 정보를 설정
          '[/**]':
            allowedOrigins: "http://127.0.0.1:3000" 

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://127.0.0.1:8761/eureka

---
spring:
  config:
    activate:
      on-profile: prod
      
  rabbitmq:
    host: ems-rabbitmq

  cloud:
    gateway:
      globalcors: # 글로벌 CORS(Cross-Origin Resource Sharing) 설정
        cors-configurations: # CORS 구성 정보를 설정
          '[/**]':
            allowedOrigins: "http://ems-react:3000"
            
eureka:
  client:
    register-with-eureka: false
    fetch-registry: true
    service-url:
      defaultZone: http://ems-discovery-service:8761/eureka
      
---
server:
  tomcat:
    basedir: /usr/local/tomcat/logs/
    accesslog:
      enabled: true
      directory: ${spring.application.name}
      prefix: access_log.
      suffix: .txt
      #rotate: true
      file-date-format: yy-MM-dd #yy-MM-dd.HH
      #encoding: UTF-8
      #max-days: -1
      #rename-on-rotate: false
      #buffered: false
      #condition-if: name #ServletRequest.getAttribute("name") != null
      #condition-unless: name #ServletRequest.getAttribute("name") == null
      pattern: '%h %l %u [%{yy-MM-dd:HH:mm:ss}t] "%r" %s %b %D %{User-Agent}i' #'%h %l %u %t "%r" %s %b'
  port: 8000
  
spring:
  application:
    name: ems-apigateway-service
  rabbitmq:
    port: 5672
    username: guest
    password: guest
    
  cloud:
    gateway:
      globalcors: # 글로벌 CORS(Cross-Origin Resource Sharing) 설정
        add-to-simple-url-handler-mapping: true
        cors-configurations: # CORS 구성 정보를 설정
          '[/**]':
            allowedHeaders: '*' #모든헤더 오픈
            allow-credentials: true #인증
            allowedMethods: POST,GET,PUT,DELETE


      routes:
      - id: member-service
        uri: lb://MEMBER-SERVICE
        predicates:
        - Path=/member-service/member/**
        - Method= GET, POST, PUT, DELETE
        filters: #Spring Cloud Gateway에서 요청과 응답을 가로채어 수정함
        - name: AuthorizationFilter
          args:
            role: "ROLE_USER"
        
        #member-service/누구나_로그인 회원가입
      - id: member-service
        uri: lb://MEMBER-SERVICE
        predicates:
        - Path=/member-service/all/**
        - Method= POST
        
        #member-service/누구나_로그인 회원가입
      - id: member-service
        uri: lb://MEMBER-SERVICE
        predicates:
        - Path=/member-service/**
        - Method= GET, POST, PUT, DELETE
        
       #member-service_관리자(ADMIN)
#      - id: member-service
#        uri: lb://MEMBER-SERVICE
#        predicates:
#        - Path=/member-service/**
#        - Method= GET, POST, PUT, DELETE
#        filters: #Spring Cloud Gateway에서 요청과 응답을 가로채어 수정함
#        - name: AuthorizationFilter
#          args:
#            role: "ROLE_ADMIN"


        #member-service/서버상태확인
      - id: member-service
        uri: lb://MEMBER-SERVICE
        predicates:
        - Path=/member-service/health_check 
        - Method= POST
        
        #member-service/actuator설정, 시크릿키 일괄 변경
        #/member-service/actuator/busrefresh 식으로 사용.
      - id: member-service
        uri: lb://MEMBER-SERVICE
        predicates:
        - Path=/member-service/actuator/** 
        - Method= GET, POST
        filters: #Spring Cloud Gateway에서 요청과 응답을 가로채어 수정함
        - RemoveRequestHeader=Cookie #요청하면 리퀘스트 객체가 들어가는데 거기의 쿠키를 삭제함
        - RewritePath=/member-service/(?<segment>.*), /$\{segment}
        # 작성방법: 경로 중 일부를 추출(주출할 부분 정규식으로)하여 변경(정규식으로)하여 라우팅함
        # segment란 URL경로의 구성요소를 말합니다. /member-service/members 에서 첫번째 세그먼트는 member-service, 두번째 members라고 함.
        # member-service/members의 경로에서 members가 정규식으로 작성되면, 라우팅시 /members만 넘어간다.
       

        #reply-service  
      - id: reply-service #순서 2번
        uri: lb://REPLY-SERVICE #순서 3번
        predicates:
        - Path=/reply-service/**  #순서 1번
        - Method= GET, POST, PUT, DELETE
        

        #item-service
      - id: item-service
        uri: lb://ITEM-SERVICE
        predicates:
        - Path=/item-service/**
        - Method=GET,POST,PUT,DELETE
        

        
        #order-service
      - id: order-service
        uri: lb://ORDER-SERVICE
        predicates:
        - Path=/order-service/**
        - Method= GET, POST, PUT, DELETE     
        
             
eureka:
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
  
management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, busrefresh